# Copyright (C) 2015-2017 Yoann Le Garff, Nicolas Boquet and Yann Le Bras
# navel-installation-scripts is licensed under the Apache License, Version 2.0

#-> BEGIN

#-> set

ECHO='echo'
PRINTF='printf'
GREP='grep'
RM='rm'
WHICH='which'
CURL='curl'
PERL='perl'
CPANM='cpanm'
GETENT='getent'
NOLOGIN='/sbin/nologin'
FALSE='/bin/false'
USERADD='useradd'
GROUPADD='groupadd'
CP='/bin/cp'
MV='mv'
MKDIR='mkdir'
CHMOD='chmod'
CHOWN='chown'
TAR='tar'
DIRNAME='dirname'
BASENAME='basename'
SYSTEMCTL='systemctl'
ARANGOSH='arangosh'
FOXXMANAGER='foxx-manager' # switch to foxx-cli (https://github.com/arangodb/foxx-cli/blob/master/ROADMAP.md) when it's production ready

#-> set (avoid changing these variables)

cpanminus_url='http://cpanmin.us'
cpanminus_module='App::cpanminus'

navel_git_remote_url='https://github.com/navel-it'

disable_install_step=()

supported_os=()

#-> functions

# std

f_log() {
    "${ECHO}" -en "[$(date +%s)] ${@}\n"
}

f_pending() {
    f_log '[PENDING]' ${@}
}

f_ok() {
    f_log '[OK]' ${@}
}

f_warning() {
    f_log '[WARNING]' ${@}
}

f_fatal() {
    f_log '[FATAL]' "${1}"

    exit $2
}

f_build_cpanm_navel_gitchain() {
    local gitchain=()

    for package in "${@}" ; do
        gitchain+=("${navel_git_remote_url}/${package}.git@${navel_git_remote_branch}")
    done

    $ECHO "${gitchain[@]}"
}

f_start_install() {
    local t_os os="${1}"

    c_function_exists 'f_global_define' && f_global_define

    for t_os in "${supported_os[@]}" ; do
        if eval "c_os_is_${t_os}" ; then
            os="${t_os}"

            c_function_exists "f_define_for_${os}" && eval "f_define_for_${os}"

            break
        fi
    done

    if [[ -n "${os}" ]] ; then
        f_pending "Installing ${program_name} (os=${os})."

        local step_number=1 RETVAL

        while c_function_exists "f_install_step_${step_number}" ; do
            if [[ ! ${disable_install_step[$step_number]} ]] ; then
                eval "f_install_step_${step_number}"

                RETVAL=$?

                if [[ $RETVAL -eq 0 ]] ; then
                    f_ok "f_install_step_${step_number} is done."
                else
                    f_fatal "f_install_step_${step_number} failed (RETVAL=$RETVAL). Cannot continue the installation." $RETVAL
                fi
            fi

            let step_number++
        done

        f_ok "The installation of ${program_name} is done."

        exit $RETVAL
    else
        f_fatal 'This OS is not supported.' 1
    fi
}

# checks

c_function_exists() {
    [[ $(type -t "${1}") == 'function' ]]
}

c_os_support_systemd() {
    "${WHICH}" systemctl &>/dev/null
}

c_os_is_rhel6() {
    "${GREP}" 6. '/etc/redhat-release' &>/dev/null
}

c_os_is_rhel7() {
    "${GREP}" 7. '/etc/redhat-release' &>/dev/null
}

c_os_is_debian7() {
    "${GREP}" -E '^(7|wheezy)' '/etc/debian_version' &>/dev/null
}

c_os_is_debian8() {
    "${GREP}" -E '^(8|jessie)' '/etc/debian_version' &>/dev/null
}

# command wrapper

w_match() {
    ( "${ECHO}" "${1}" | "${GREP}" -E "${2}" &>/dev/null ) && return 0

    return 1
}

w_install_pkg() {
    if c_os_is_rhel6 || c_os_is_rhel7 ; then
        "${YUM}" -y install "${@}"
    elif c_os_is_debian7 || c_os_is_debian8 ; then
        "${APT_GET}" -y install "${@}"
    fi
}

w_useradd() {
    local shell

    # if [[ -f ${NOLOGIN} ]] ; then
        # shell=${NOLOGIN}
    # else
        shell="${FALSE}"
    # fi

    "${GETENT}" passwd "${1}" 1>/dev/null || "${USERADD}" -rmd "${3}" -g "${2}" -s "${shell}" "${1}"
}

w_groupadd() {
    "${GETENT}" group "${1}" 1>/dev/null || "${GROUPADD}" -r "${1}"
}

w_cp() {
    "${CP}" -r "${@}"
}

w_mkdir() {
    local fails=0 directory

    for directory in "${@}" ; do
        ( [[ -d "${directory}" ]] || "${MKDIR}" -p "${directory}" ) || let fails++
    done

    return $fails
}

w_chmod() {
    "${CHMOD}" "${@}"
}

w_enable_service_to_start_at_boot() {
    if c_os_support_systemd ; then
        "${SYSTEMCTL}" enable "${1}"
    else
        if c_os_is_debian7 || c_os_is_debian8 ; then
            "${UPDATE_RC_D}" "${1}" defaults
        elif c_os_is_rhel6 || c_os_is_rhel7 ; then
            "${CHKCONFIG}" "${1}" on
        fi
    fi
}

w_chown() {
    "${CHOWN}" "${@}"
}

w_arango_ensure_nonsystem_database() {
    local database_name="${1}"

    shift

    "${ARANGOSH}" "${@}" --javascript.execute-string "const _ = require('lodash'); if ( ! _.includes(db._databases(), '${database_name}')) db._createDatabase('${database_name}')"
}

#-> END
